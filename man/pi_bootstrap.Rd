% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pi_bootstrap.R
\name{pi_bootstrap}
\alias{pi_bootstrap}
\title{Prediction intervals using single season block bootstrapping}
\usage{
pi_bootstrap(
  object,
  newdata,
  season.period = 1,
  m = 1,
  num.futures = 1000,
  confidence = 95,
  recursive = FALSE,
  recursive_colRange = NULL
)
}
\arguments{
\item{object}{A fitted model object of the class \code{smimodel}, \code{backward},
\code{pprFit}, or \code{gaimFit}.}

\item{newdata}{The set of new data on for which the forecasts are required
(i.e. test set; should be a \code{tsibble}).}

\item{season.period}{Length of the seasonal period.}

\item{m}{Multiplier. (Block size = \code{season.period} * \code{m})}

\item{num.futures}{Number of possible future sample paths to be generated.}

\item{confidence}{Confidence level.}

\item{recursive}{Whether to obtain recursive forecasts or not (default -
FALSE).}

\item{recursive_colRange}{If \code{recursive = TRUE}, the range of column numbers
in \code{newdata} to be filled with forecasts.}
}
\description{
Generates multi-step prediction intervals corresponding to the forecasts
obtained on a given test set (i.e. \code{newdata}), using single season block
bootstrapping method.
}
\examples{
library(dplyr)
library(ROI)
library(tibble)
library(tidyr)
library(tsibble)
n = 1205
set.seed(123)
sim_data <- tibble(x_lag_000 = runif(n)) \%>\%
  mutate(
    # Add x_lags
    x_lag = lag_matrix(x_lag_000, 5)) \%>\%
  unpack(x_lag, names_sep = "_") \%>\%
  mutate(
    # Response variable
    y1 = (0.9*x_lag_000 + 0.6*x_lag_001 + 0.45*x_lag_003)^3 + rnorm(n, sd = 0.1),
    # Add an index to the data set
    inddd = seq(1, n)) \%>\%
  drop_na() \%>\%
  select(inddd, y1, starts_with("x_lag")) \%>\%
  # Make the data set a `tsibble`
  as_tsibble(index = inddd)
# Training set
sim_train <- sim_data[1:1000, ]
# Test set
sim_test <- sim_data[1001:1200, ]
# Index variables
index.vars <- colnames(sim_data)[3:8]
# Model fitting
model1 <- model_smimodel(data = sim_train,
                         yvar = "y1",
                         index.vars = index.vars,
                         initialise = "ppr")
# Calculating lower and upper bounds for 95\% prediction interval
PI_model1 <- pi_bootstrap(object = model1, 
                         newdata = sim_test)
# Lower and upper bounds
PI_model1$bounds
                         
}
\references{
Hyndman, R.J. & Fan, S. (2010). Density Forecasting for Long-Term
Peak Electricity Demand. \emph{IEEE Transactions on Power Systems}, 25(2),
1142â€“1153. \url{http://dx.doi.org/10.1109/TPWRS.2009.2036017}
}
